#!/bin/bash

set -e

if [[ "${CI}" ]]; then
    set -x
fi

function usage() {
    echo -n \
        "Usage: $(basename "$0") --dev
Deploys the staging infrastructure.

--console: Don't run deploy; drop into a console in the deploy container
--dev: Include this flag to deploy a dev stack.
    To do so you'll need to set the necessary environment
    variables; see README.
"
}

function require_env() {
    v=$(eval echo \$${1})

    if [[ -z ${v} ]]; then
        echo "Must set ${1} as environment variable" >&2
        exit 1
    fi
}

require_env "IMAGE_TAG"
require_env "ENVIRONMENT"

while [[ "$#" -gt 0 ]]; do case $1 in
    --dev)
        DEV_DEPLOY=1
        shift
        ;;
    --help)
        usage
        exit 0
        shift
        ;;
    *)
        usage "Unknown parameter passed: $1"
        shift
        shift
        ;;
    esac done

DOCKER_COMPOSE="docker-compose -f deployment/docker-compose.yml"

# Set terraform to deploy to dev or staging
if [ "${DEV_DEPLOY}" = "1" ]; then
    TERRAFORM_DIR=/opt/src/deployment/terraform/dev
else
    if [[ "${CI}" != "true" ]]; then
        echo "Only CI can deploy to staging!"
        exit 1
    fi
    TERRAFORM_DIR=/opt/src/deployment/terraform/${ENVIRONMENT}
fi

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then

    (
        # Set git commit
        GIT_COMMIT="$(git rev-parse --short HEAD)"
        export GIT_COMMIT

        # Build deployment container
        ${DOCKER_COMPOSE} build

        # Run deployment script
        ${DOCKER_COMPOSE} run --rm \
            deploy bin/deploy \
            -t "${TERRAFORM_DIR}" \
            -y
    )
fi
