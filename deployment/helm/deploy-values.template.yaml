environment: "{{ tf.environment }}"
namespace: "pc"

stac:
  enabled: true
  image:
    repository: "{{ env.ACR_STAC_REPO }}"
    tag: "{{ env.IMAGE_TAG }}"
    pullPolicy: Always

  server:
    minDbConnections: "1"
    maxDbConnections: "1"
    webConcurrency: "1"
    request_timeout: 30

  rate_limit:
    collections: 500
    collection: 500
    items: 100
    item: 500
    search: 100

  back_pressure:
    collections:
      req_per_sec: 100
      inc_ms: 10
    collection:
      req_per_sec: 100
      inc_ms: 10
    items:
      req_per_sec: 100
      inc_ms: 10
    item:
      req_per_sec: 100
      inc_ms: 10
    search:
      req_per_sec: 100
      inc_ms: 10

  deploy:
    replicaCount: "{{ tf.stac_replica_count }}"
    podAnnotations:
      "pc/gitsha": "{{ env.GIT_COMMIT }}"
    useWorkloadIdentity: true
    serviceAccount:
      annotations:
        "azure.workload.identity/client-id": {{ tf.cluster_stac_identity_client_id }}
        "azure.workload.identity/tenant-id": {{ tf.tenant_id }}

  appRootPath: "/stac"
  port: "80"
  debug: "TRUE"

  tiler_href: data/

tiler:
  enabled: true
  image:
    repository: "{{ env.ACR_TILER_REPO }}"
    tag: "{{ env.IMAGE_TAG }}"
    pullPolicy: Always

  server:
    minDbConnections: "1"
    maxDbConnections: "1"
    webConcurrency: "1"
    request_timeout: 30

  deploy:
    replicaCount: "{{ tf.tiler_replica_count }}"
    podAnnotations:
      "pc/gitsha": "{{ env.GIT_COMMIT }}"
    useWorkloadIdentity: true

    serviceAccount:
      annotations:
        "azure.workload.identity/client-id": {{ tf.cluster_tiler_identity_client_id }}
        "azure.workload.identity/tenant-id": {{ tf.tenant_id }}

  default_max_items_per_tile: 5
  appRootPath: "/data"
  port: "80"

  stac_api_url: http://planetary-computer-stac.pc.svc.cluster.local
  stac_api_href: stac/
  # PCT sas needs to be accessed through Azure Front Door
  pc_sdk_sas_url: https://planetarycomputer-test.microsoft.com/sas/token
  pc_sdk_subscription_key: "{{ tf.pc_sdk_subscription_key }}"
  vectortile_sa_base_url: https://pcvectortiles.blob.core.windows.net

storage:
  account_name: "{{ tf.storage_account_name }}"
  collection_config_table_name: "{{ tf.collection_config_table_name }}"
  container_config_table_name: "{{ tf.container_config_table_name }}"
  ip_exception_config_table_name: "{{ tf.ip_exception_config_table_name }}"
  table_value_ttl: 1

redis:
  host: "{{ tf.redis_host }}"
  password: "{{ tf.redis_password }}"
  port: "{{ tf.redis_port }}"
  ttl: 60
  ssl: true

metrics:
  instrumentationKey: "{{ tf.instrumentation_key }}"

pcingress:
  services:
    stac:
      path: "/stac(/|$)(.*)"
      name: "planetary-computer-stac"
      port: "80"
    tiler:
      path: "/data(/|$)(.*)"
      name: "planetary-computer-tiler"
      port: "80"

  cert:
    secretName: "pqe-tls-secret"

  certIssuer:
    enabled: false
    privateKeySecretRef: "{{ tf.cluster_cert_issuer }}"
    server: "{{ tf.cluster_cert_server }}"
    issuerEmail: "planetarycomputer@microsoft.com"
    secretName: "pqe-tls-secret"

  ingress:
    enabled: true
    tlsHost: "planetarycomputer-test.microsoft.com"
    hosts:
      - "planetarycomputer-test.microsoft.com"
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
      nginx.ingress.kubernetes.io/proxy-buffers-number: "8"

      # Enable CORS
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS"
      nginx.ingress.kubernetes.io/cors-allow-origin: "*"
      nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: "X-PC-Request-Entity,DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"

migrations:
  enabled: false

postgres:
  serverName: "{{ tf.pg_host }}"
  user: "{{ tf.pg_user }}"
  password: "{{ tf.pg_password }}"
  dbName: "{{ tf.pg_database }}"

secretProvider:
  create: true
  providerName: "keyvault"
  userAssignedIdentityID: "{{ env.SECRET_PROVIDER_MANAGED_IDENTITY_ID }}"
  tenantId: "{{ env.AZURE_TENANT }}"
  keyvaultName: "{{ env.KEYVAULT_NAME }}"
  keyvaultCertificateName: "{{ env.SECRET_PROVIDER_KEYVAULT_SECRET }}"
  kubernetesCertificateSecretName: "{{ env.SECRET_PROVIDER_KEYVAULT_SECRET }}"
