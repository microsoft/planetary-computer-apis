#!/bin/bash

source bin/lib

set -e

if [[ "${CI}" ]]; then
    set -x
fi

function usage() {
    echo -n \
        "Usage: $(basename "$0") -t TERRAFORM_DIR [--plan,--skip-tf]
Deploys the project infrastructure.

-t TERRAFORM_DIR: The terraform directory. Required.
--plan: Only run Terraform plan.
--skip-tf: Skips Terraform apply. Will still gather terraform output
"
}

###################
# Parse arguments #
###################

while [[ "$#" -gt 0 ]]; do case $1 in
    -t)
        TERRAFORM_DIR=${2}
        shift
        shift
        ;;
    --skip-tf)
        SKIP_TF=1
        shift
        ;;
    --plan)
        PLAN_ONLY=1
        shift
        ;;
    --help)
        usage
        exit 0
        shift
        ;;
    *)
        usage "Unknown parameter passed: $1"
        shift
        shift
        ;;
    esac done

# Always disable shared access keys on script exit
trap disable_shared_access_keys EXIT

###################################
# Check and configure environment #
###################################

# Enable shared access keys on storage accounts that must have properties read
# [storage_account]=resource_group
declare -A SAK_STORAGE_ACCOUNTS
SAK_STORAGE_ACCOUNTS=(
  ["pctapisstagingsa"]="pct-apis-westeurope-staging_rg"
  ["pcfilestest"]="pc-test-manual-resources"
)

if [[ -z ${TERRAFORM_DIR} ]]; then
    echo "Must pass in TERRAFORM_DIR with -t"
    exit 1
fi

require_env "IMAGE_TAG"
require_env "GIT_COMMIT"

# Directory for rendered values and templates
CONF_DIR='/opt/conf'
mkdir -p ${CONF_DIR}

# Set up environment
setup_env

# Print some information

echo "===== Running Deploy ====="
echo "IMAGE_TAG: ${IMAGE_TAG}"

if [ -z "$ARM_CLIENT_ID" ]; then
  export ARM_CLIENT_ID=$(az account show --query user.name -o tsv)
  echo "Using Azure CLI auth with username: ${ARM_CLIENT_ID}"
fi


# ---------------------------------------------------

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then

    #########################
    # Add IP to KV firewall #
    #########################

    bin/kv_add_ip

    #####################
    # Deploy Terraform  #
    #####################

    pushd ${TERRAFORM_DIR}

    if [[ "${SKIP_TF}" != 1 ]]; then
        echo "Deploying infrastructure with Terraform..."

        enable_shared_access_keys

        terraform init --upgrade

        if [ "${PLAN_ONLY}" ]; then
            terraform plan
            exit 0
        fi

        terraform apply -auto-approve
    fi

    # Gather terraform output
    gather_tf_output

    popd

    ##############################
    # Remove IP from KV firewall #
    ##############################

    bin/kv_rmv_ip

    ############################
    # Render Helm chart values #
    ############################

    render_values

    ########################
    # Login to the cluster #
    ########################

    cluster_login

    ######################
    # Deploy Helm charts #
    ######################

    echo "Deploying helm charts..."

    setup_helm

    echo "==================="
    echo "==== STAC API ====="
    echo "==================="

    echo "Deploying STAC API helm chart..."
    helm upgrade --install planetary-computer-stac helm/published/planetary-computer-stac \
        -n pc \
        --kube-context "${KUBE_CONTEXT}" \
        --wait \
        --timeout 2m0s \
        -f ${DEPLOY_VALUES_FILE} \

    echo "================"
    echo "==== Tiler ====="
    echo "================"

    echo "Deploying Tiler helm chart..."
    helm upgrade --install planetary-computer-tiler helm/published/planetary-computer-tiler \
        -n pc \
        --kube-context "${KUBE_CONTEXT}" \
        --wait \
        --timeout 2m0s \
        -f ${DEPLOY_VALUES_FILE} \

    echo "=================="
    echo "==== Ingress ====="
    echo "=================="

    echo "Deploying ingress component..."
    helm upgrade --install pc-apis-ingress helm/pc-apis-ingress \
        -n pc \
        --kube-context "${KUBE_CONTEXT}" \
        --wait \
        --timeout 2m0s \
        -f ${DEPLOY_VALUES_FILE}

    echo "Installing ingress-nginx..."
    helm upgrade --install nginx-ingress helm/ingress-nginx-4.8.3.tgz \
        -n pc \
        --set controller.replicaCount=2 \
        --set controller.service.externalTrafficPolicy="Local" \
        --set controller.service.loadBalancerIP="${INGRESS_IP}" \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="${DNS_LABEL}" \
        --set controller.image.registry="mcr.microsoft.com" \
        --set controller.image.image="oss/kubernetes/ingress/nginx-ingress-controller" \
        --set controller.image.tag="v1.9.6-patched" \
        --set controller.image.digest="sha256:2383717ea3edd1652b97e5b82adf15a3e7f091d0d5d0eceb8dce4410e3a6a292" \
        --version "4.8.3"\
        --wait \
        --timeout 2m0s \
        -f bin/nginx-values.yaml

    #########################
    # Deploy Azure Function #
    #########################

    deploy_funcs

fi
