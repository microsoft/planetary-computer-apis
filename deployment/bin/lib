#!/bin/bash

function require_env() {
    v=$(eval echo \$${1})

    if [[ -z ${v} ]]; then
        echo "Must set ${1} as environment variable" >&2
        exit 1
    fi
}

function setup_env() {

    # Directory for rendered values and templates
    export CONF_DIR='/opt/conf'
    mkdir -p ${CONF_DIR}

    # Paths for genrating deployment values
    export TEMPLATE_PATH=helm/deploy-values.template.yaml
    export TF_OUTPUT_FILE=${CONF_DIR}/tf-output.json
    export DEPLOY_VALUES_FILE=${CONF_DIR}/deploy-values.yaml
}

function tf_output() {
    echo $(terraform output -json resources | jq -r .${1})
}

function gather_tf_output() {

    if [ "${1}" ]; then
        pushd ${1} || return;
    fi

    echo "Gathering terraform output..."

    # Export output values
    terraform output -json > ${TF_OUTPUT_FILE}

    # Record terraform output variables for cluster login
    export RESOURCE_GROUP=$(tf_output resource_group)
    export CLUSTER_NAME=$(tf_output cluster_name)

    export ENVIRONMENT=$(tf_output environment)
    export INGRESS_IP=$(tf_output ingress_ip)
    export DNS_LABEL=$(tf_output dns_label)
    export AZURE_TENANT=$(tf_output tenant_id)
    export KEYVAULT_NAME=$(tf_output secret_provider_keyvault_name)
    export SECRET_PROVIDER_MANAGED_IDENTITY_ID=$(tf_output secret_provider_managed_identity_id)
    export SECRET_PROVIDER_KEYVAULT_SECRET=$(tf_output secret_provider_keyvault_secret)

    export FUNCTION_APP_NAME=$(tf_output function_app_name)

    if [ "${1}" ]; then
        popd
    fi
}

function render_values() {
    echo "Rendering chart value files..."
    
    bin/jinja ${TF_OUTPUT_FILE} ${TEMPLATE_PATH} ${DEPLOY_VALUES_FILE}
}

function azlogin() {
    az login --service-principal \
        --username ${ARM_CLIENT_ID} \
        --password ${ARM_CLIENT_SECRET} \
        --tenant ${ARM_TENANT_ID}
}

function cluster_login() {
    echo "Logging into the cluster..."

    az aks get-credentials \
        --resource-group ${RESOURCE_GROUP} \
        --name ${CLUSTER_NAME} \
        --subscription ${ARM_SUBSCRIPTION_ID} \
        --file=kubeconfig

    # kubelogin mutates every entry in the kubeconfig
    # https://github.com/Azure/kubelogin/issues/87.
    # So we export to a kubeconfig file
    echo "Converting kubeconfig..."
    kubelogin convert-kubeconfig \
        -l azurecli \
        --kubeconfig=kubeconfig
    export KUBECONFIG=kubeconfig
}

function setup_helm() {
    # Set the helm context to the same as the kubectl context
    export KUBE_CONTEXT=$(kubectl config current-context)
}

function full_setup() {
    if [[ -z ${1} ]]; then
        echo "Must pass in terraform directory."
    else
        echo "Using terraform at ${1}..."
        setup_env;
        gather_tf_output ${1};
        render_values;
        cluster_login;
        setup_helm;
    fi
}

function prepare_funcs() {
    rm -rf /opt/src/pcfuncs_deploy
    cp -r /opt/src/pcfuncs /opt/src/pcfuncs_deploy

    pushd /opt/src/pcfuncs_deploy || exit
    # Create symlink to enable function app building of pctasks
    ln -s /opt/src/pccommon /opt/src/pcfuncs_deploy/pccommon_linked
    cp requirements-deploy.txt requirements.txt
    popd || exit
}

function deploy_funcs() {
    require_env "FUNCTION_APP_NAME"

    prepare_funcs

    pushd /opt/src/pcfuncs_deploy
    func azure functionapp publish ${FUNCTION_APP_NAME} --python
    popd
}

function get_cidr_range() {
    runnerIpAddress=$(curl -s https://ifconfig.me/all.json | jq -r ".ip_addr")
    IFS='.' read -r -a ip_parts <<< "$runnerIpAddress"
    echo "${ip_parts[0]}.${ip_parts[1]}.0.0/16"
}

function disable_shared_access_keys() {
    echo "Disabling shared access key on storage account..."

    for SAK_STORAGE_ACCOUNT in "${!SAK_STORAGE_ACCOUNTS[@]}"; do
        SAK_RESOURCE_GROUP=${SAK_STORAGE_ACCOUNTS[$SAK_STORAGE_ACCOUNT]}

        az storage account update \
            --name ${SAK_STORAGE_ACCOUNT} \
            --resource-group ${SAK_RESOURCE_GROUP} \
            --allow-shared-key-access false \
            --subscription ${ARM_SUBSCRIPTION_ID} \
            --output none \
            --only-show-errors

        if [ $? -ne 0 ]; then
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            echo "WARNING: Failed to turn off shared key access on the storage account."
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            exit 2
        fi
    done
}

function enable_shared_access_keys() {
    # Terraform isn't able to read all resources from a storage account if shared key access is disabled
    # so while we're deploying, we need to enable it. Since we haven't run TF yet, we don't have the name of the account
    # so they are hardcoded here. This is a temporary workaround until this is resolved
    # https://github.com/hashicorp/terraform-provider-azurerm/issues/25218

    echo "Enabling shared key access for storage accounts..."
    for SAK_STORAGE_ACCOUNT in "${!SAK_STORAGE_ACCOUNTS[@]}"; do
        SAK_RESOURCE_GROUP=${SAK_STORAGE_ACCOUNTS[$SAK_STORAGE_ACCOUNT]}

        echo "   - ${SAK_RESOURCE_GROUP}.${SAK_STORAGE_ACCOUNT}"
        az storage account update \
            --name ${SAK_STORAGE_ACCOUNT} \
            --resource-group ${SAK_RESOURCE_GROUP} \
            --allow-shared-key-access true \
            --subscription ${ARM_SUBSCRIPTION_ID} \
            --output none \
            --only-show-errors
    done

    sleep 10
}

function add_ip_to_firewalls() {
    cidr=$(get_cidr_range)

    echo "Adding IP $cidr to Key Vault firewall allow list..."
    az keyvault network-rule add \
        -g "${KEY_VAULT_RESOURCE_GROUP_NAME}"  \
        -n "${KEY_VAULT_NAME}" \
        --ip-address "$cidr" \
        --subscription "${ARM_SUBSCRIPTION_ID}" \
        --output none \
        --only-show-errors

    # Also add the IP to the terraform state storage account
    for FW_STORAGE_ACCOUNT in "${!FW_STORAGE_ACCOUNTS[@]}"; do
        FW_RESOURCE_GROUP=${FW_STORAGE_ACCOUNTS[$FW_STORAGE_ACCOUNT]}
        echo "Adding IP $cidr to ${FW_STORAGE_ACCOUNT} Storage firewall allow list..."
        az storage account network-rule add \
            -g "${FW_RESOURCE_GROUP}" \
            -n "${FW_STORAGE_ACCOUNT}" \
            --ip-address "$cidr" \
            --subscription "${ARM_SUBSCRIPTION_ID}" \
        --output none \
        --only-show-errors
    done

    sleep 10
}

function remove_ip_from_firewalls() {
    cidr=$(get_cidr_range)

    echo "Removing IP $cidr from Key Vault firewall allow list..."
    az keyvault network-rule remove \
        -g ${KEY_VAULT_RESOURCE_GROUP_NAME}  \
        -n ${KEY_VAULT_NAME} \
        --ip-address $cidr \
        --subscription ${ARM_SUBSCRIPTION_ID} \
        --output none \
        --only-show-errors

    for FW_STORAGE_ACCOUNT in "${!FW_STORAGE_ACCOUNTS[@]}"; do
        FW_RESOURCE_GROUP=${FW_STORAGE_ACCOUNTS[$FW_STORAGE_ACCOUNT]}
        echo "Removing IP $cidr from ${FW_STORAGE_ACCOUNT} Storage firewall allow list..."
        az storage account network-rule remove \
            -g ${FW_RESOURCE_GROUP} \
            -n ${FW_STORAGE_ACCOUNT} \
            --ip-address $cidr \
            --subscription ${ARM_SUBSCRIPTION_ID} \
            --output none \
            --only-show-errors
    done
}
